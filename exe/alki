#!/usr/bin/env ruby
require 'fileutils'
require 'optparse'
require 'alki/support'
require 'alki/generator'

valid_addons = ["console","reload"]

options = {
  config_dir: nil,
  primary_config: nil,
  addons: [],
  project_dir: Dir.pwd,
}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: alki init PROJECT_NAME [options]"

  opts.on("-a", "--addons=ADDONS", Array, "Add addon to project. Valid addons: #{valid_addons.join(', ')}") do |vs|
    vs.each do |v|
      unless valid_addons.include? v
        puts "Invalid addon: #{v}"
        exit 1
      end
      options[:addons] |= [v]
    end
  end

  opts.on('-d','--directory=DIRECTORY', 'Project root, defaults to the current working directory') do |v|
    options[:project_dir] = v
  end

  opts.on("-c", "--config=DIECTORY", "Override config dir (default \"config\")") do |v|
    options[:config_dir] = v
  end

  opts.on("-p", "--primary=PRIMARY_CONFIG", "Override primary config (default \"assembly\")") do |v|
    options[:primary_config] = v
  end
end

parser.parse!

if ARGV.size != 2 || ARGV[0] != "init"
  puts parser.banner
  exit 1
end

unless ARGV[1] =~  %r{^[a-z0-9_]+(/[a-z0-9_]+)*$}
  puts "Invalid project name. May only consist of lowercase letters, numbers, underscores, and forward slashes"
  exit 1
end

project_name = ARGV[1]

fw = Alki::Generator.new options[:project_dir]

config_dir = options[:config_dir] || 'config'
primary_config = options[:primary_config] || 'assembly'
primary_config_path = File.join(config_dir,primary_config+'.rb')
fw.opt_create primary_config_path, <<END
Alki do
  # Assembly config goes here
end
END

opts = []
opts << "config_dir: '#{options[:config_dir]}'" if options[:config_dir]
opts << "primary_config: '#{options[:primary_config]}'" if options[:primary_config]
unless opts.empty?
  opt_str = " #{opts.join(', ')}"
end
fw.create "lib/#{project_name}.rb", <<END
require 'alki'
Alki.project_assembly!#{opt_str}
END

fw.opt_create "Gemfile", <<END
source "https://rubygems.org"
END

fw.trigger 'Gemfile', 'bundle install'

fw.add_line "Gemfile", "gem 'alki'", match: /^gem ['"]alki['"]/

if options[:addons].include? "console"
  fw.add_line "Gemfile", "gem 'alki-console'", match: /^gem ['"]alki-console['"]/

  name = project_name.tr('/','-')
  fw.add_line primary_config_path, "  mount :console, 'alki/console', name: '#{name}'", match: /^\s*mount\( *:console/, after: 'Alki do'

  fw.create_exec 'bin/console', <<END
#!/usr/bin/env ruby
require 'bundler/setup'
require 'alki/bin'
require '#{project_name}'
#{Alki::Support.classify(project_name)}.new.console.run
END
end

if options[:addons].include? "reload"
  fw.add_line "Gemfile", "gem 'alki-reload'", match: /^gem ['"]alki-reload['"]/

  env_name = project_name.tr('a-z/','A-Z_')+"_ENV"
  fw.add_line primary_config_path, "  mount(:reloader, 'alki/reload'){ set(:watch) { development? } }", match: /^\s*mount\(? *:reloader/, after: 'Alki do'
  fw.add_line primary_config_path, "  set(:development?){ ENV['#{env_name}'] == 'development' }", match: /^\s*set :development?/, after: 'Alki do'
end

fw.write
